<!-- <section class="bg-base-100">
  <div class="flex p-5 md:p-10 !pt-5 space-x-5 md:space-x-10 overflow-x-scroll">
    <div data-cmt-trigger class="flex flex-col items-center">
      <h2 data-cmt-title="${event.name}" class="font-mono font-bold text-sm md:text-md h-10 whitespace-nowrap">
        ${event.name}
      </h2>
      <div data-cmt-card class="indicator overflow-visible">
        <span
          class="badge badge-primary lg:badge-lg px-2 indicator-item indicator-start -translate-x-[10%] -translate-y-1/4 shadow">
          <small class="font-mono text-white text-xs lg:text-sm">
            ${event.day}
          </small>
        </span>
        <div class="relative rounded-xl border border-base-content/20 shadow-xl shadow-slate-950/20 overflow-hidden">
          <img class="-z-10 aspect-[0.75] w-40 max-w-[35vw] object-cover object-center" src="${event.image}"
            alt="${event.name}" />
          <div class="absolute bottom-0 w-full p-2 bg-base-200 bg-opacity-75 backdrop-blur-sm">
            <p class="text-center md:text-lg">
              ${event.location}
              ${event.start}
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>
</section> -->

<div id="events-carousel"></div>

<script>
  (async function () {
    const activities_api = '{{ site.home.events.api }}/activities';
    const events_api = '{{ site.home.events.api }}/events';

    try {
      const [activitiesResponse, eventsResponse] = await Promise.all([
        fetch(activities_api),
        fetch(events_api)
      ]);

      if (!activitiesResponse.ok) {
        throw new Error(`Activities API error: ${activitiesResponse.status} ${activitiesResponse.statusText}`);
      }
      if (!eventsResponse.ok) {
        throw new Error(`Events API error: ${eventsResponse.status} ${eventsResponse.statusText}`);
      }

      const [activitiesData, eventsData] = await Promise.all([
        activitiesResponse.json(),
        eventsResponse.json()
      ]);

      const events = [...activitiesData, ...eventsData];
      console.log('Combined events:', events);

      const sectionHTML = `
        <section class="bg-base-100">
          <div class="px-5 pt-5 md:px-10 md:pt-10">
            <h1 class="text-3xl font-bold">Upcoming Events:</h1>
          </div>
          <div class="flex p-5 md:p-10 !pt-5 space-x-5 md:space-x-10 overflow-x-scroll">
            ${events.map(event => `
            <a href="https://join.redbrick.dcu.ie">
              <div data-cmt-trigger class="flex flex-col items-center">
                <h2 data-cmt-title="${event.name}" class="font-bold md:text-md h-10 whitespace-nowrap">
                  ${event.name}
                </h2>
                <div data-cmt-card class="indicator overflow-visible">
                  <span class="badge badge-primary lg:badge-lg px-2 indicator-item indicator-start -translate-x-[10%] -translate-y-1/4 shadow">
                    <small class="font-mono text-white text-xs lg:text-sm">
                      ${event.day || 'soon &trade;'}
                    </small>
                  </span>
                  <div class="relative rounded-xl border border-base-content/20 shadow-xl shadow-slate-950/20 overflow-hidden">
<img class="-z-10 aspect-[0.75] w-60 object-cover object-center" src="${event.image || '{{ site.images.brick }}'}" alt="${event.name}" />
          <div class="absolute bottom-0 w-full p-2 bg-base-200 bg-opacity-75 backdrop-blur-sm">
            <p class="text-center md:text-lg">
              ${event.location}
            </p>
          </div>
                  </div>
                </div>
              </div>
            </a>
            `).join('')}
          </div>
        </section>
      `;

      document.getElementById('events-carousel').innerHTML = sectionHTML;
    } catch (error) {
      console.error('Error fetching or processing events:', error);
      document.getElementById('events-carousel').innerHTML = `<p>Error loading events: ${error.message}</p>`;
    }
  })();
  if (!userAgent.getDevice().type) { // is a desktop device
    gsap.registerPlugin(ScrollTrigger)
    gsap.registerPlugin(TextPlugin)
    gsap.set("[data-cmt-card]", {
      scale: 0.9,
      opacity: 0,
    })
    gsap.set("[data-cmt-title]", {
      text: "",
    })
    ScrollTrigger.batch("[data-cmt-trigger]", {
      once: true,
      end: "bottom bottom",
      onEnter: (batch) => batch.forEach((element, i) => {
        const stagger = 0.2
        const cardElement = element.querySelector("[data-cmt-card]")
        const titleElement = element.querySelector("[data-cmt-title]")
        gsap.to(cardElement, {
          scale: 1,
          opacity: 1,
          duration: 0.3,
          ease: "power2.inOut",
          delay: i * stagger,
        })
        gsap.to(titleElement, {
          text: titleElement.dataset.cmtTitle,
          duration: 0.75,
          delay: 0.25 + (i * stagger),
        })
      }),
    })
  }
</script>
